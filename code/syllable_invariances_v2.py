import hdf5storage
import torch
from utils.hubert import generate_hubert_features_and_pcs

from utils.ast import generate_ast_features_and_pcs
from utils.cochdnn import generate_cochdnn_features_and_pcs
from utils.cochresnet import generate_cochresnet_features_and_pcs
import numpy as np

######personalize parameters
device = "cuda" if torch.cuda.is_available() else "cpu"
sr = 100
pc = 100
project = "syllable-invariances_v2"

####################intracranial-natsound165####################

mat = hdf5storage.loadmat(
    f"/home/gliao2/snormanh_lab_shared/projects/{project}/stimuli/stim_names.mat"
)
stim_names = np.array([cell[0] for cell in mat["stim_names"].reshape(-1)])
# remove random-durmatched-order1 from stim_names
index = np.where(stim_names == "random-durmatched-order1")[0][0]
stim_names = np.delete(stim_names, index)
output_root = f"/scratch/snormanh_lab/shared/projects/{project}/analysis"
wav_dir = f"/scratch/snormanh_lab/shared/projects/{project}/stimuli/stimulus_audio"


# #######cochleagram########
# # do not need to generate cochleagram features since they are already generated by matlab
# feature_name = "cochleagram"
# wav_features = []
# print("loading cochleagram features")
# for stim_index, stim_name in enumerate(stim_names):
#     wav_path = os.path.join(wav_dir, f"{stim_name}.wav")
#     feature_path = f"{output_root}/features/{feature_name}/original/{stim_name}.mat"
#     feature = hdf5storage.loadmat(feature_path)["features"]
#     wav_features.append(feature)
# print("computing PCs of cochleagram features")
# pca_pipeline = generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
# )
# generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
#     pca_pipeline=pca_pipeline,
# )

# #######spectrotemporal model(modulus)########
# # do not need to generate cochleagram features since they are already generated by matlab
# feature_name = "spectrotemporal"
# variant = "modulus"
# wav_features = []
# print("loading spectrotemporal modulus features")
# for stim_index, stim_name in enumerate(stim_names):
#     wav_path = os.path.join(wav_dir, f"{stim_name}.wav")
#     feature_path = f"{output_root}/features/{feature_name}/{variant}/{stim_name}.mat"
#     feature = hdf5storage.loadmat(feature_path)["features"]
#     wav_features.append(feature)
# print("computing PCs of spectrotemporal modulus features")
# pca_pipeline = generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
#     variant=variant,
# )
# generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
#     pca_pipeline=pca_pipeline,
#     variant=variant,
# )


# #######spectrotemporal model(real)########
# # do not need to generate cochleagram features since they are already generated by matlab
# feature_name = "spectrotemporal"
# variant = "real"
# wav_features = []
# print("loading spectrotemporal real features")
# for stim_index, stim_name in enumerate(stim_names):
#     wav_path = os.path.join(wav_dir, f"{stim_name}.wav")
#     feature_path = f"{output_root}/features/{feature_name}/{variant}/{stim_name}.mat"
#     feature = hdf5storage.loadmat(feature_path)["features"]
#     wav_features.append(feature)
# print("computing PCs of spectrotemporal real features")
# pca_pipeline = generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
#     variant=variant,
# )
# generate_pc(
#     wav_features,
#     pc,
#     output_root,
#     feature_name,
#     stim_names,
#     demean=True,
#     std=False,
#     pca_pipeline=pca_pipeline,
#     variant=variant,
# )


#######HUBERT########
# generate hubert features

generate_hubert_features_and_pcs(device, stim_names, output_root, wav_dir, sr, pc)


# #######AST########
# # generate AST features

# generate_ast_features_and_pcs(device, stim_names, output_root, wav_dir, sr, pc)


# #######CochDNN########
# # generate CochDNN features

# generate_cochdnn_features_and_pcs(device, stim_names, output_root, wav_dir, sr, pc)


# #######CochResNet########
# # generate CochResNet features
# generate_cochresnet_features_and_pcs(device, stim_names, output_root, wav_dir, sr, pc)
